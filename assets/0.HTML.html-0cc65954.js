import{_ as e,s as a,v as r,a9 as i}from"./framework-68a4c2fc.js";const h={},d=i('<h1 id="html-知识总结" tabindex="-1"><a class="header-anchor" href="#html-知识总结" aria-hidden="true">#</a> HTML 知识总结</h1><h2 id="_1-dom-相关" tabindex="-1"><a class="header-anchor" href="#_1-dom-相关" aria-hidden="true">#</a> 1 DOM 相关</h2><ul><li>DOM 是什么？: <strong>文档对象模型 (DOM)</strong> 是 HTML 和 XML 文档的编程接口。它提供了对文档的结构化的表述，并定义了一种方式可以使从程序中对该结构进行访问，从而改变文档的结构，样式和内容。DOM 将文档解析为一个由<strong>节点和对象（包含属性和方法的对象）组成的结构集合</strong>。简言之，它会将 web 页面和脚本或程序语言连接起来。</li></ul><h3 id="_1-1-从输入-url-到网页加载完成发生了什么" tabindex="-1"><a class="header-anchor" href="#_1-1-从输入-url-到网页加载完成发生了什么" aria-hidden="true">#</a> 1.1 从输入 url 到网页加载完成发生了什么？</h3><p>DNS 响应、TCP 三次确认链接（握手）、构造 DOM 树和 CSS 树、排列布局、绘制页面</p><p>构造 DOM 树即按照服务器响应的页面代码解析出一个相应的节点树，将 CSS 树对应节点的样式分配到各个节点；再将 DOM 树压入一个文档流中进行布局；最后根据文档流中的顺序进行页面绘制。</p><h4 id="_1-1-1-tcp" tabindex="-1"><a class="header-anchor" href="#_1-1-1-tcp" aria-hidden="true">#</a> 1.1.1 TCP？</h4><p>传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由 IETF 的 RFC 793 定义。</p><p>TCP 是面向连接的，无论哪一方向另一方发送数据之前，都必须先在双方之间建立一条连接。在 TCP/IP 协议中，TCP 协议提供可靠的连接服务，连接是通过三次握手进行初始化的。三次握手的目的是同步连接双方的序列号和确认号 并交换 TCP 窗口大小信息。</p><ol><li><p>第一次握手：建立连接。客户端发送连接请求报文段，将 SYN 位置为 1，Sequence Number 为 x;然后，客户端进入 SYN_SEND 状态，等待服务器的确认;</p></li><li><p>第二次握手：服务器收到 SYN 报文段。服务器收到客户端的 SYN 报文段，需要对这个 SYN 报文段进行确认，设置 Acknowledgment Number 为 x+1(Sequence Number+1);同时，自己自己还要发送 SYN 请求信息，将 SYN 位置为 1，Sequence Number 为 y;服务器端将上述所有信息放到一个报文段(即 SYN+ACK 报文段)中，一并发送给客户端，此时服务器进入 SYN_RECV 状态;</p></li><li><p>第三次握手：客户端收到服务器的 SYN+ACK 报文段。然后将 Acknowledgment Number 设置为 y+1，向服务器发送 ACK 报文段，这个报文段发送完毕以后，客户端和服务器端都进入 ESTABLISHED 状态，完成 TCP 三次握手。</p></li></ol><h4 id="_1-1-2-css-树与-dom-树是同时解析的吗-会互相影响吗" tabindex="-1"><a class="header-anchor" href="#_1-1-2-css-树与-dom-树是同时解析的吗-会互相影响吗" aria-hidden="true">#</a> 1.1.2 CSS 树与 DOM 树是同时解析的吗？会互相影响吗？</h4><p>CSS 的加载（即 CSS 树的解析）不会阻塞 DOM 树的解析，会阻塞 DOM 树的渲染，会阻塞后面 js 语句的执行。</p><h4 id="_1-1-3-那还有其他因素可以影响到-css-树或者-dom-树的解析顺序吗" tabindex="-1"><a class="header-anchor" href="#_1-1-3-那还有其他因素可以影响到-css-树或者-dom-树的解析顺序吗" aria-hidden="true">#</a> 1.1.3 那还有其他因素可以影响到 CSS 树或者 DOM 树的解析顺序吗？</h4><p>JS 文件的加载会阻塞它们的解析和渲染。</p><h4 id="_1-1-4-重排-重绘" tabindex="-1"><a class="header-anchor" href="#_1-1-4-重排-重绘" aria-hidden="true">#</a> 1.1.4 重排？重绘？</h4><p>重绘不一定需要重排（比如颜色的改变），重排必然导致重绘（比如改变网页位置）</p><p>DOM 的变化影响了元素的几何属性，浏览器需要重新计算元素的几何属性，同时其他元素的几何属性和位置也会受到影响，浏览器会使渲染树中受到影响的部分失效，并重新构造渲染树，这个过程是重排，浏览器会重新绘制受到影响的部分到屏幕，这个过程叫重绘。</p><h3 id="_1-2-dom-事件流" tabindex="-1"><a class="header-anchor" href="#_1-2-dom-事件流" aria-hidden="true">#</a> 1.2 DOM 事件流</h3><p>DOM 事件流包含 3 个阶段：事件捕获阶段、处于目标阶段、事件冒泡阶段。</p><p>冒泡即事件从自身出发向上层逐层传播，而捕获则刚好相反，从最高级出发向下到触发事件的元素。</p><h2 id="_2-元素相关" tabindex="-1"><a class="header-anchor" href="#_2-元素相关" aria-hidden="true">#</a> 2 元素相关</h2><p>按渲染区别分为行内元素与块级元素，按照内容分为替换元素与非替换元素。</p><ul><li>行内元素：不会独占一行，相邻的行内元素会排列在一行，直到排不下才会换行。无法设置宽度与高度，这些由内容的宽高决定。行内元素的水平方向可以设置间距，但垂直方向上无效。</li><li>块级元素：独占一行，默认宽度会继承父元素的宽度，可以设置宽度与高度。</li><li>替换元素：浏览器通过该类元素的标签与属性来决定渲染的内容，如 img、input、select 等。</li><li>非替换元素：浏览器直接呈现内容的元素，例如 p、title、h1、div 等</li></ul><h3 id="_2-1-常见的行内元素" tabindex="-1"><a class="header-anchor" href="#_2-1-常见的行内元素" aria-hidden="true">#</a> 2.1 常见的行内元素</h3><p>span、input、img、textarea、label、select 等</p><h3 id="_2-2-常见的块级元素" tabindex="-1"><a class="header-anchor" href="#_2-2-常见的块级元素" aria-hidden="true">#</a> 2.2 常见的块级元素</h3><p>p、h1/h2/h3/h4/h5、div、ul、li、table 等</p><h3 id="_2-3-div-是替换元素吗-为什么" tabindex="-1"><a class="header-anchor" href="#_2-3-div-是替换元素吗-为什么" aria-hidden="true">#</a> 2.3 &lt;div&gt;是替换元素吗？为什么？</h3><p>不是，因为 div 元素只呈现它自己的内容，不会由于自己的属性改变去修改内容（非样式改变）。</p>',29),t=[d];function n(l,s){return a(),r("div",null,t)}const o=e(h,[["render",n],["__file","0.HTML.html.vue"]]);export{o as default};
